{"version":3,"sources":["src/questions/question1.js","src/questions/question2.js","src/questions/question3.js","src/questions/question4.js","src/questions/question5.js","src/questions/index.js","src/index.js"],"names":["question1","JSON","stringify","question2","question3","question4","question5","doc","document","getElementById","innerHTML"],"mappings":";;;AAQC,aALM,SAASA,IAGNC,MAAAA,wCAAAA,OAAAA,KAAKC,UAAU,YADvB,QAGD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA;;ACDA,aAJM,SAASC,IAENF,MAAAA,wCAAAA,OAAAA,KAAKC,UAAU,YADvB,QAGD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA;;ACKA,aARM,SAASE,IAMNH,MAAAA,wCAAAA,OAAAA,KAAKC,UAAU,YADvB,QAGD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA;;ACQA,aAVM,SAASG,IAQNJ,MAAAA,wCAAAA,OAAAA,KAAKC,UAAU,YADvB,QAGD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA;;ACbA,aAJM,SAASI,IAENL,MAAAA,wCAAAA,OAAAA,KAAKC,UAAU,YADvB,QAGD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA;;ACHD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAJA,IAAA,EAAA,QAAA,eACA,EAAA,QAAA,eACA,EAAA,QAAA,eACA,EAAA,QAAA,eACA,EAAA,QAAA;;ACUA,aAdA,QAAA,gBACA,IAAA,EAAA,QAAA,eAQMK,EAAMC,SAKZD,EAAIE,eAAe,OAAOC,UAWlB,6ZAAA,QAAA,EAXR,EAAA,aAiBQ,qKAAA,QAAA,EAjBR,EAAA,aAuBQ,wJAAA,QAAA,EAvBR,EAAA,aA6BQ,gKAAA,QAAA,EA7BR,EAAA,aAmCQ,8JAAA,QAAA,EAnCR,EAAA,aAAA","file":"src.21a0fa92.js","sourceRoot":"..","sourcesContent":["/**\n * How to check if an object is an array or not?\n */\nexport function question1() {\n  // Output the answer\n  return `The answer to question 1...\n    eg. ${JSON.stringify(\"myanswer\")}\n  `;\n}\n","/**\n * Provide a simple example of a callback function.\n */\nexport function question2() {\n  return `The answer to question 2...\n    eg. ${JSON.stringify(\"myanswer\")}\n  `;\n}\n","/**\n * Implement enqueue and dequeue functions using only two stacks.\n * Enqueue means to add an element, dequeue to remove an element.\n */\nexport function question3() {\n  // eg.\n  // let inputStack = []; // When we enqueue, we add to this stack\n  // When we dequeue, we add the inputStack object to outputStack\n  // let outputStack = [];\n  return `The answer to question 3...\n    eg. ${JSON.stringify(\"myanswer\")}\n  `;\n}\n","/**\n * How would you use a 'closure' to create a *private* counter?\n * Hint: It should error if we try to access the private variable like this: _counter;\n * We should be able to use the counter like this:\n * const c = counter();\n * c.add(5);\n * c.add(9);\n * c.retrieve();\n *\n */\nexport function question4() {\n  function counter() {}\n  // Sample usage of our counter function\n  // const c = counter();\n  // c.add(5);\n  // c.add(9);\n\n  return `The answer to question 4...\n    eg. ${JSON.stringify(\"myanswer\")}\n  `;\n}\n","/**\n * Demonstrate the difference between 'call' and 'apply'.\n */\nexport function question5() {\n  return `The answer to question 5...\n    eg. ${JSON.stringify(\"myanswer\")}\n  `;\n}\n","import { question1 } from \"./question1\";\nimport { question2 } from \"./question2\";\nimport { question3 } from \"./question3\";\nimport { question4 } from \"./question4\";\nimport { question5 } from \"./question5\";\nexport { question1, question2, question3, question4, question5 };\n","import \"./styles.css\";\nimport {\n  question1,\n  question2,\n  question3,\n  question4,\n  question5\n} from \"./questions\";\n\nconst doc = document;\n/**\n * Please answer questions in the questions folder, that way\n * we keep everything nice and clean in separate scopes!\n */\ndoc.getElementById(\"app\").innerHTML = `\n<h3>Questions!</h3>\n<p>Please answer questions in the <em>src/questions</em> folder, that way\nwe keep everything nice and clean and in separate scopes!</p>\n<p>Don't forget to return your answer from each question function \nto display it below!</p>\n<div>\n  <h3>Test answers:</h3>\n  <div id=\"question-1\">\n    <h4>How can we check if an object is an array or not?</h4>\n    <div class=\"answer\">\n      ${question1()}\n    </div>\n  </div>\n  <div id=\"question-2\">\n    <h4>Explain what a callback function is and provide a simple example.</h4>\n    <div class=\"answer\">\n      ${question2()}\n    </div>\n  </div>\n  <div id=\"question-3\">\n    <h4>Implement enqueue and dequeue using only two stacks.</h4>\n    <div class=\"answer\">\n      ${question3()}\n    </div>\n  </div>\n  <div id=\"question-4\">\n    <h4>How would you use a closure to create a private 'counter'?</h4>\n    <div class=\"answer\">\n      ${question4()}\n    </div>\n  </div>\n  <div id=\"question-5\">\n    <h4>Demonstrate the difference between 'call' and 'apply'.</h4>\n    <div class=\"answer\">\n      ${question5()}\n    </div>\n  </div>\n</div>\n`;\n"]}